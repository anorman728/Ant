ANT Notes:

* ANT = Andrew Norman's Timelogger.

+ WriteFile (class)
    * Class that writes to file.
    + Create constructor
        * Arguments:
            filePath
    + filePath (string property)
        * Path of csv file to output to.
        * Set by constructor.
    + touch (private method)
        * Create new file if it doesn't exist already.
    + writeDatetime (public method)
        + Calls touch.
        + Writes current datetime.
            * In form "\r\n01/01/1900 12:00 AM".
    + writeMessage (public method)
        * Arguments: Message.
        + Calls touch.
        + Surround message with double quotes.
        + Replace all double quote characters with two single-quotes.
        + Write message to file, *without* adding a new line.
    Example:
        03/06/2017 9:30 PM, "I'm working on this, ''that'', and the other."
    endex
+ Review all classes to make sure they work under traditional Windows Forms instead of Gtk#.
    + Also make sure PromptWindow.cs is replaced by an InputBox (if possible).
+ PromptManager (class)
    + Create constructor
        * Arguments:
            String of file path
            String of comma-separated times.
        + Set timeArr property (see below)
        + Create writeFileObj.
    + timeArr (HourMinuteAMPM array property)
        * Array that contains all times that want to prompt user.
        * All strings in the form "HH:mm".  (I think this will probably be better than DateTime objects).
        * It's possible that will need to replace this with 
    + writeFileObj (object property)
        * Instance of WriteFile class.
    + prompt (private method)
        * Method that prompts user for input while asking "What are you working on?"
        + On display:
            + Call this.writeFileObj.writeDatetime
        + On Enter/OK:
            + Call this.writeFileObj.writeMessage(message)
        + On Esc/Cancel:
            + Remove prompt
                * Will still have first cell in results of datetime, but message will be blank.
        - Remove prompt if goes unanswered when another prompt is called.
            * Will still have first cell in results of datetime, but message will be blank.
            * Will need to come back to this in a future version.  For now, just have overlapping messages.
    + promptIfInArray (private method)
        * Run prompt if any values in array match current minute.
    + run/stop
        * Not sure yet how this is going to work yet because don't know how C# will handle this yet.
    + Find out how to limit inputBox.
        * Now doesn't create new box if one is already up.
    + Beep sound
+ Create docblocks throughout project.
+ MainWindow
    + Needs to be able to modify two things:
        + timeArr
            + Prompt Times (listbox)
                * This is passive-- Only has other items add to it and read from it.
            + Add Time Button
                + Bring up new window.
            + Delete time button.
                * Selected time.
        + filePath
            * i.e., the one in WriteFile class.
    + Needs to be able to "start" and "stop" logging.
        Starting:
            + Start 
            + When started, gray out everything that can edit timeArr and filePath as well as the start button.
        + When stopped, gray out stop button.
    - When close, warn if settings aren't changed.
        * No longer relevant.
    + Need an "about" popup.
        + ANT = "Andrew Norman's Timelogger."
        + github.com link.
    + Add Ant icon.
- Settings class
    ! May be able to handle all of this with Data->(ApplicationSettings)
    * How settings should be handled:
        * Json.NET (nuget package)
        * Need to use "Newtonsoft.Json" directive.
        * JsonConvert.SerializeObject will convert an object's public properties to JSON object string.
            Example:
                someObject thisObj = new someObject();
                String jsonStr = JsonConvert.SerializeObject(thisObj);
            endex
        * JsonConvert.DeserializeObject will parse a JSON string and convert it to a .NET object.
            Example:
                someObject thisObj = JsonConvert.DeserializeObject<someObject>(jsonStr);
            endex
        * Should be able to use the same read/write methods to read and save files.
    > Save settings to config file.
    > Load settings from config file.
    * Moot-- Handled using Properties.Settings.
+ Test if inputtimes are correct.
    * Use regex.
+ Rearrange code to put events in single place.
+ Make bracket convention consistent.
+ Create documentation.
    + In-code for MainWindow.
+ Create executable installer.
- Test on Win7 machine.
    * Too aggravating to use Win7.
> Create end-user documentation in README.md.
    + Give direct link to install executable.
    + Explanation of how to use it.
    > Link to YouTube video explaining how to use it.
        * Will need to actually make video.
> 1.1.0 additions.
    + Button to populate Prompt Times based on intervals in a timeframe.
        + Populate times method for MainWindow.
        + AddMultipleTimesWindow class.
        + Documentation for AddMultipleTimesWindow class.
    + Button to clear all current prompt times.
    + Error-handling if file is not readable.
        * Need to do this on a per-prompt basis, not for just starting the prompt manager.
    + Do something about the blank values being added to listbox.
        * Probably just a workaround to refuse to add if it's blank.
        * Thought I fixed it, but it's still doing it.
            * Now it's done.
    + Fix buttons not being grayed out when starting.
    + Update droplists to make it more keyboard-friendly.
        * Probably just use numericupdowns.
        + AddTimeWindow
            + Replace with numericupdowns.
            + Enable keypreview.
            + Make first field default.
            + Default to AM
            - Format string to 0:00
                * Doesn't seem to be possible with numericupdown.
            + See if can add max to numericUpDown to top out hour and minute.
            - See if can get it to scroll back from 0 to 59.
                * Not worth the effort.
        + AddMultipleTimesWindow
            + Replace numeric dropdowns with numericupdowns
                + Top out hour amd minute
            + Review TabIndex on each control.
            + Default to AM.
    + Multiple inputs options.
        * This will mean creating a new window instead of just using the inputbox function.
        + Create new window class.
            * PromptWindow
            + Build constructor with these parameters:
                + numFields: Number of messages to display in box.
                + writeFile object.
            + Dynamically create the textboxes.
                * Will need to be based on a priate property of the class.
                * Create them in the form, then move that code from the designer file to constructor (after initialize).
                * Modify said code in a loop to add multiple boxes.
            + Dynamically expand window.
            + KeyUp event:
                + Call writeFile object's writeMessages method.
                + Close window.
        + Modify WriteFile class.
            + numFields property.
                + Create.
                + Getters/setters.
            + Update constructor.
            + Update Touch to modify number of headers.
        + Modify promptManager constructor.
            + Create numFields property.
        + Update promptManager.prompt to use PromptWindow class.
            + Pass writeFile object and numFields to PromptWindow.
        + Update MainWindow to pass "Number of Fields" to prompt manager.
        + Window is unresponsive.
            * When bring up window in debug, works fine.
            * When bring up window as part of prompt manager, it's unresponsive.
            * No error is thrown.
            * Seems to make it through the constructor.
            * The prompt method seems to work fine when not done through timer.
            * Also need to test "prompt if in array" function.
            * Current idea: Try the timer method from System.Windows.Forms.
                * This fixed it.
    + Add headers instead of just "Ant Log" title.
        + Update "touch" to use the number of fields property.
        * This ended up being part of previous point.
    + Update Add Time window to default to AM.
    + Highlight entire number on numericupdowns.
        * This makes it a little more keyboard friendly.
    + Review documentation.
    + Make it less intrusive, less demanding of attention.
        * Make this an option.
        * Need to figure out if there's a way to make it scroll up from systray.
            * May already exist, but may need to actually create this.
        ! It's possible that will need to put this off, and it's possible that this may not be realistic at all.
        * What it needs to do:
            + Lower-right corner.
            + Always on top.
                * Topmost property.
            - Doesn't take focus.
                * Combining this with topmost is possible, but will take time to find out.  Not worth doing at present, especially since I don't even like it.
    > Release
        > Create zip file with install files.
    > Update README.md.
> 1.2.0 additions.
    > Multi-select for deleting times in Prompt Times listbox.
    > Minimize to systray.
